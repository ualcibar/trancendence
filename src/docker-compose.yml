version: '3'
services:
  angular:
    container_name: angular
    build: ./frontend
    volumes:
      - ./frontend:/usr/src/app/
    ports:
      - "4200:4200"
    networks:
      - bridge
  postgre:
    container_name: db
    image: postgres:latest
    networks:
      - bridge
    env_file:
      - ./database/.env
      - ./.env
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U patata"]
      interval: 5s
      timeout: 100s
      retries: 100

  backend:
    container_name: backend
    build: ./backend
    restart: always
    volumes:
      - ./backend:/usr/src/app/
    env_file:
      - ./.env
    networks:
      - bridge
    ports:
      - "8000:8000"
    depends_on:
      postgre:
        condition: service_healthy
#
#  frontend:
#    container_name: frontend
#    build: ./frontend
#    #restart: always
#    networks:
#      - bridge
#    volumes:
#      - ./frontend:/usr/src/app/src
#      #- ./frontend:/usr/share/nginx/html
#      -  /usr/src/app/node_modules
#    env_file:
#      - frontend/.env
#    ports:
#      -  "5174:5174"
#    depends_on:
#      - backend
#    #command: /bin/sh -c "while sleep 1000; do :; done"
#
#  matchmaking:
#    container_name: matchmaking
#    build: ./matchmaking/docker
#    volumes:
#      - ./matchmaking/src:/app/src
#      - ./matchmaking/Cargo.toml:/app/Cargo.toml
#    networks:
#      - bridge
#    command: cargo run
#    ports:
#      - "5555:5555"

networks:
  bridge:
    driver: bridge

#docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' backend
