version: '3'
services:
  frontend:
    container_name: frontend
    build: ./frontend
    volumes:
      - ./frontend/angular:/usr/src/app/
    ports:
      - "80:80"
      - "443:443"
    networks:
      - bridge
    depends_on:
      backend:
        condition: service_healthy

  postgre:
    container_name: db
    image: postgres:latest
    networks:
      - bridge
    env_file:
      - ./database/.env
      - ./.env
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U patata"]
      interval: 5s
      timeout: 100s
      retries: 100

  backend:
    container_name: backend
    build: ./backend
    restart: always
    volumes:
      - ./backend:/usr/src/app/
    env_file:
      - ./.env
    networks:
      - bridge
    healthcheck:
      test: ["CMD", "echo", "OK!"]
      interval: 3s
      timeout: 100s
      retries: 5
    depends_on:
      postgre:
        condition: service_healthy

  turn:
    container_name: turn
    build: ./turn
    network_mode: host
    # ports:
    #   - "3478:3478"
    #   - "3478:3478/udp"
    #   - "5349:5349"
    #   - "5349:5349/udp"
    #   - "49160-49200:49160-49200/udp"
    volumes:
      - ./turn/ssl:/etc/openssl/ssl/
#
#  matchmaking:
#    container_name: matchmaking
#    build: ./matchmaking/docker
#    volumes:
#      - ./matchmaking/src:/app/src
#      - ./matchmaking/Cargo.toml:/app/Cargo.toml
#    networks:
#      - bridge
#    command: cargo run
#    ports:
#      - "5555:5555"

networks:
  bridge:
    driver: bridge

#docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' backend
